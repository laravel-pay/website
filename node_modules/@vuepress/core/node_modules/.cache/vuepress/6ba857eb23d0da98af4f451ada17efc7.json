{"remainingRequest":"/home/sayed/laravel-pay/website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/sayed/laravel-pay/website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/sayed/laravel-pay/website/node_modules/vue-loader/lib/index.js??ref--1-1!/home/sayed/laravel-pay/website/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/sayed/laravel-pay/website/docs/about.md?vue&type=template&id=75271694&","dependencies":[{"path":"/home/sayed/laravel-pay/website/docs/about.md","mtime":1692156378996},{"path":"/home/sayed/laravel-pay/website/node_modules/cache-loader/dist/cjs.js","mtime":1692154932567},{"path":"/home/sayed/laravel-pay/website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1692154933049},{"path":"/home/sayed/laravel-pay/website/node_modules/cache-loader/dist/cjs.js","mtime":1692154932567},{"path":"/home/sayed/laravel-pay/website/node_modules/vue-loader/lib/index.js","mtime":1692154933049},{"path":"/home/sayed/laravel-pay/website/node_modules/@vuepress/markdown-loader/index.js","mtime":1692156637830}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJsYXJhdmVsLW5vdGlmaWNhdGlvbi1jaGFubmVscyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbGFyYXZlbC1ub3RpZmljYXRpb24tY2hhbm5lbHMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBMYXJhdmVsIE5vdGlmaWNhdGlvbiBDaGFubmVscyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIGFpbSB0byBwcm92aWRlIGEgY3VyYXRlZCBzZWxlY3Rpb24gb2Ygbm90aWZpY2F0aW9uIGNoYW5uZWxzIGZvciB1c2UgaW4geW91ciBMYXJhdmVsIGFwcGxpY2F0aW9ucy5cblBsZWFzZSB1c2UgdGhlIHNpZGViYXIgb24gdGhlIGxlZnQgdG8gZmluZCB0aGUgYXBwcm9wcmlhdGUgcGFja2FnZSBmb3IgeW91IG5lZWRzLiBJZiB3ZSBkb24ndCBoYXZlIGEgcGFja2FnZSBmb3IgeW91clxuZGVzaXJlZCBzZXJ2aWNlIHlldCwgcmVhZCBvbiBmb3IgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBjb250cmlidXRlISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInN1Z2dlc3RpbmctYS1uZXctY2hhbm5lbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc3VnZ2VzdGluZy1hLW5ldy1jaGFubmVsIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU3VnZ2VzdGluZyBhIG5ldyBDaGFubmVsIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlBsZWFzZSBjcmVhdGUgYW4gaXNzdWUgaW4gdGhlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vbGFyYXZlbC1wYXkvY2hhbm5lbHMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImNoYW5uZWxzIHJlcG8iKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZm9yIHlvdXJcbnN1Z2dlc3Rpb24uIEluY2x1ZGUgbGlua3MgdG8gdGhlIEFQSSBkb2N1bWVudGF0aW9uIGFuZCBwcm92aWRlcidzIHNpdGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udHJpYnV0aW5nIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb250cmlidXRpbmciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnRyaWJ1dGluZyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSdkIGxpa2UgdG8gYWRkIGEgY3VzdG9tIGRyaXZlciB0byB0aGUgbGlzdCwgcGxlYXNlIGRvd25sb2FkIG91ciAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2xhcmF2ZWwtcGF5L3NrZWxldG9uIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJza2VsZXRvbiByZXBvIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiwgYW5kIG9wZW4gYSBuZXcgUHVsbCBSZXF1ZXN0IG9uIG91ciAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2xhcmF2ZWwtcGF5L2NoYW5uZWxzIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJjaGFubmVscyByZXBvIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQ29udHJpYnV0aW9ucyBhcmUgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIndlbGNvbWUiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCB3aWxsIGJlIGZ1bGx5ICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjcmVkaXRlZCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGxlYXNlIHJlYWQgYW5kIHVuZGVyc3RhbmQgdGhlIEZBUSBiZWxvdyBiZWZvcmUgY3JlYXRpbmcgYW4gaXNzdWUgb3IgcHVsbCByZXF1ZXN0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZhcSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZmFxIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRkFRIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaG93LWNhbi1pLWdldC1zdXBwb3J0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNob3ctY2FuLWktZ2V0LXN1cHBvcnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBIb3cgY2FuIEkgZ2V0IHN1cHBvcnQ/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91IG5lZWQgaGVscCB3aXRoIGFueXRoaW5nLCB5b3UgY2FuIGNyZWF0ZSBhbiBpc3N1ZSBvbiBnaXRodWIuIElmIHRoZSBpc3N1ZSByZWxhdGVzIHRvIGEgc3BlY2lmaWMgY2hhbm5lbCxcbnlvdSBzaG91bGQgY3JlYXRlIHRoZSBpc3N1ZSBpdCB0aGF0IHJlcG9zaXRvcnkuIFRoZXJlJ3MgYSBsaW5rIGF0IHRoZSB0b3Agb2YgZWFjaCBkb2N1bWVudGF0aW9uIHBhZ2UgdG8gdGhlIGNoYW5uZWwnc1xuZ2l0aHViIHJlcG9zaXRvcnkuIEEgbGlzdCBvZiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2xhcmF2ZWwtcGF5P3R5cGU9c291cmNlIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJhbGwgdGhlIHJlcG9zIGNhbiBiZSBmb3VuZCBoZXJlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgaGF2ZSBxdWVzdGlvbnMgYWJvdXQgdGhlIHByb2plY3QgaW4gZ2VuZXJhbCwgcGxlYXNlIGNyZWF0ZSBhbiBpc3N1ZSBpbiB0aGUgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9sYXJhdmVsLXBheS9jaGFubmVscyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiY2hhbm5lbHMgcmVwbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgeW91IGhhdmUgZm91bmQgYSBzZWN1cml0eSBpc3N1ZSBpbiBvbmUgb2YgdGhlIGNoYW5uZWxzLCB0cnkgdG8gY29udGFjdCB0aGUgbWFpbnRhaW5lciB1c2luZyB0aGUgZW1haWwgaW4gdGhlIGNoYW5uZWwnc1xucmVhZG1lLiBJZiB5b3UgY2FuJ3QgZ2V0IGluIGNvbnRhY3Qgd2l0aCB0aGVtLCBwbGVhc2UgZW1haWwgIgogICAgICAgICksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJtYWlsdG86YXR5bWljcUBnbWFpbC5jb20iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJhdHltaWNxQGdtYWlsLmNvbSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIEknbGwgYWRkcmVzcyB0aGUgaXNzdWUuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hvLW93bnMtdGhlLXdvcmsiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doby1vd25zLXRoZS13b3JrIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hvIG93bnMgdGhlIHdvcms/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSXQgaXMgdXAgdG8gdGhlIHBhY2thZ2UgYXV0aG9yIHRvIG1haW50YWluIHRoZSByZXBvc2l0b3J5IGFmdGVyIGl0IGhhcyBiZWVuIHJlbGVhc2VkLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJZb3UnbGwgYmUgZ2l2ZW4gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImFkbWluIHJpZ2h0cyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0byB5b3VyIHJlcG8uIFNvIHlvdSBhcmUgaW4gdG90YWwgY29udHJvbC4gT25seSBpZiB5b3UgZXZlciBkbyBzb21ldGhpbmcgbGlrZSBicmVha2luZyBzZW12ZXIgd2UnbGwgc3RlcCBpbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UnbGwgYWxzbyBiZSBhZGRlZCB0byB0aGUgTGFyYXZlbCBOb3RpZmljYXRpb24gQ2hhbm5lbHMgZ2l0aHViIG9yZ2FuaXphdGlvbiAod2hpY2ggc2hvd3MgdXAgb24geW91ciBnaXRodWIgcHJvZmlsZSkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgc29tZSBwcm9ibGVtcyBzaG91bGQgYXJpc2UgeW91J3JlIGFsd2F5cyBmcmVlIHRvIGNvcHkgb3ZlciB0aGUgY29kZSB0byB5b3VyIG93biByZXBvIGFuZCBhYmFuZG9uIHRoZSBvbmUgaW4gb3VyIG9yZ2FuaXphdGlvbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGF0LWxldmVsLW9mLWFjY2Vzcy1pcy1naXZlbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1sZXZlbC1vZi1hY2Nlc3MtaXMtZ2l2ZW4iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXaGF0IGxldmVsIG9mIGFjY2VzcyBpcyBnaXZlbj8iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQWRtaW4gUmlnaHRzICYgbWVtYmVyc2hpcCBvZiB0aGUgZ2l0aHViIG9yZ2FuaXNhdGlvbi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgIndoYXQtaGFwcGVucy10by10aGUtcGFja2FnZS1pZi10aGUtYXV0aG9yLWRlY2lkZXMtdG8tYWJhbmRvbi1vci1xdWl0IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjd2hhdC1oYXBwZW5zLXRvLXRoZS1wYWNrYWdlLWlmLXRoZS1hdXRob3ItZGVjaWRlcy10by1hYmFuZG9uLW9yLXF1aXQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFdoYXQgaGFwcGVucyB0byB0aGUgcGFja2FnZSwgaWYgdGhlIGF1dGhvciBkZWNpZGVzIHRvIGFiYW5kb24gb3IgcXVpdD8iCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJXZSwgYXMgYSBjb21tdW5pdHksIHdpbGwgc3RlcCBpbiB1bnRpbCB3ZSBmaW5kIGEgcmVwbGFjZW1lbnQuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAid2hhdC1yaWdodHMtYXJlLWJlaW5nLXRha2VuLWF3YXktZnJvbS10aGUtYXV0aG9yLWF1dG9tYXRpY2FsbHkiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiN3aGF0LXJpZ2h0cy1hcmUtYmVpbmctdGFrZW4tYXdheS1mcm9tLXRoZS1hdXRob3ItYXV0b21hdGljYWxseSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgV2hhdCByaWdodHMgYXJlIGJlaW5nIHRha2VuIGF3YXkgZnJvbSB0aGUgYXV0aG9yIGF1dG9tYXRpY2FsbHk/IgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTm9uZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC1hcmUtdGhlaXItcmlnaHRzLWFzLWFuLWF1dGhvciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1hcmUtdGhlaXItcmlnaHRzLWFzLWFuLWF1dGhvciIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgYXJlIHRoZWlyIHJpZ2h0cyBhcyBhbiBhdXRob3I/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVjaG5pY2FsbHk6IEFkbWluIHJpZ2h0cywgYW5kIHlvdSBtYXkgZG8gd2l0aCB0aGUgY29kZSB3aGF0ZXZlciB5b3VyIHdhbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDMiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAid2hvLWRlY2lkZXMtd2hvLWNhbi1iZS1wYXJ0LW9mLXRoZS1wYWNrYWdlLWFzLWEtY29sbGFib3JhdG9yIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjd2hvLWRlY2lkZXMtd2hvLWNhbi1iZS1wYXJ0LW9mLXRoZS1wYWNrYWdlLWFzLWEtY29sbGFib3JhdG9yIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBXaG8gZGVjaWRlcyB3aG8gY2FuIGJlIHBhcnQgb2YgdGhlIHBhY2thZ2UgYXMgYSBjb2xsYWJvcmF0b3I/IgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcyBhbiBhZG1pbiwgcGFja2FnZSBtYWludGFpbmVycyBjYW4gY2hvb3NlIHRoZWlyIG93biBjb2xsYWJvcmF0b3JzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIndoYXQtYXJlLXRoZS1ydWxlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1hcmUtdGhlLXJ1bGVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCBhcmUgdGhlIHJ1bGVzPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIllvdSdyZSByZWFkaW5nIHRoZW0uIElmIHdlIGhhdmUgdGhlIHNhbWUgdmFsdWVzIChjcmVhdGluZyBhIGdvb2QgZXhwZXJpZW5jZSBmb3IgdGhlIHVzZXJzKSB3ZSBkb24ndCBuZWVkIHRvbyBtYW55IHJ1bGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIndoYXQtYXJlLXRoZS1iZW5lZml0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1hcmUtdGhlLWJlbmVmaXRzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCBhcmUgdGhlIGJlbmVmaXRzPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJGb3IgcGFja2FnZSB1c2VyczogYW4gZXhjZWxsZW50IGV4cGVyaWVuY2UiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBwYWNrYWdlIGNyZWF0b3JzOiBhIHNtYWxsIGVjb3N5c3RlbSBvZiBwYWNrYWdlIGNyZWF0b3JzIHRoYXQgY2FuIGhlbHAgZWFjaCBvdGhlciIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImV0aXF1ZXR0ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZXRpcXVldHRlIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFdGlxdWV0dGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGVzZSBwcm9qZWN0cyBhcmUgb3BlbiBzb3VyY2UsIGFuZCBhcyBzdWNoLCB0aGUgbWFpbnRhaW5lcnMgZ2l2ZSB0aGVpciBmcmVlIHRpbWUgdG8gYnVpbGQgYW5kIG1haW50YWluIHRoZSBzb3VyY2UgY29kZVxuaGVsZCB3aXRoaW4uIFRoZXkgbWFrZSB0aGUgY29kZSBmcmVlbHkgYXZhaWxhYmxlIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSBvZiB1c2UgdG8gb3RoZXIgZGV2ZWxvcGVycy4gSXQgd291bGQgYmVcbmV4dHJlbWVseSB1bmZhaXIgZm9yIHRoZW0gdG8gc3VmZmVyIGFidXNlIG9yIGFuZ2VyIGZvciB0aGVpciBoYXJkIHdvcmsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGxlYXNlIGJlIGNvbnNpZGVyYXRlIHRvd2FyZHMgbWFpbnRhaW5lcnMgd2hlbiByYWlzaW5nIGlzc3VlcyBvciBwcmVzZW50aW5nIHB1bGwgcmVxdWVzdHMuIExldCdzIHNob3cgdGhlXG53b3JsZCB0aGF0IGRldmVsb3BlcnMgYXJlIGNpdmlsaXplZCBhbmQgc2VsZmxlc3MgcGVvcGxlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0J3MgdGhlIGR1dHkgb2YgdGhlIG1haW50YWluZXIgdG8gZW5zdXJlIHRoYXQgYWxsIHN1Ym1pc3Npb25zIHRvIHRoZSBwcm9qZWN0IGFyZSBvZiBzdWZmaWNpZW50XG5xdWFsaXR5IHRvIGJlbmVmaXQgdGhlIHByb2plY3QuIE1hbnkgZGV2ZWxvcGVycyBoYXZlIGRpZmZlcmVudCBza2lsbHNldHMsIHN0cmVuZ3RocywgYW5kIHdlYWtuZXNzZXMuIFJlc3BlY3QgdGhlIG1haW50YWluZXIncyBkZWNpc2lvbiwgYW5kIGRvIG5vdCBiZSB1cHNldCBvciBhYnVzaXZlIGlmIHlvdXIgc3VibWlzc2lvbiBpcyBub3QgdXNlZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ2aWFiaWxpdHkiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ZpYWJpbGl0eSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVmlhYmlsaXR5IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiByZXF1ZXN0aW5nIG9yIHN1Ym1pdHRpbmcgbmV3IGZlYXR1cmVzLCBmaXJzdCBjb25zaWRlciB3aGV0aGVyIGl0IG1pZ2h0IGJlIHVzZWZ1bCB0byBvdGhlcnMuIE9wZW5cbnNvdXJjZSBwcm9qZWN0cyBhcmUgdXNlZCBieSBtYW55IGRldmVsb3BlcnMsIHdobyBtYXkgaGF2ZSBlbnRpcmVseSBkaWZmZXJlbnQgbmVlZHMgdG8geW91ciBvd24uIFRoaW5rIGFib3V0XG53aGV0aGVyIG9yIG5vdCB5b3VyIGZlYXR1cmUgaXMgbGlrZWx5IHRvIGJlIHVzZWQgYnkgb3RoZXIgdXNlcnMgb2YgdGhlIHByb2plY3QuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicHJvY2VkdXJlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcm9jZWR1cmUiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByb2NlZHVyZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJCZWZvcmUgZmlsaW5nIGFuIGlzc3VlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQXR0ZW1wdCB0byByZXBsaWNhdGUgdGhlIHByb2JsZW0sIHRvIGVuc3VyZSB0aGF0IGl0IHdhc24ndCBhIGNvaW5jaWRlbnRhbCBpbmNpZGVudC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2hlY2sgdG8gbWFrZSBzdXJlIHlvdXIgZmVhdHVyZSBzdWdnZXN0aW9uIGlzbid0IGFscmVhZHkgcHJlc2VudCB3aXRoaW4gdGhlIHByb2plY3QuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNoZWNrIHRoZSBwdWxsIHJlcXVlc3RzIHRhYiB0byBlbnN1cmUgdGhhdCB0aGUgYnVnIGRvZXNuJ3QgaGF2ZSBhIGZpeCBpbiBwcm9ncmVzcy4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2hlY2sgdGhlIHB1bGwgcmVxdWVzdHMgdGFiIHRvIGVuc3VyZSB0aGF0IHRoZSBmZWF0dXJlIGlzbid0IGFscmVhZHkgaW4gcHJvZ3Jlc3MuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJCZWZvcmUgc3VibWl0dGluZyBhIHB1bGwgcmVxdWVzdDoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNoZWNrIHRoZSBjb2RlYmFzZSB0byBlbnN1cmUgdGhhdCB5b3VyIGZlYXR1cmUgZG9lc24ndCBhbHJlYWR5IGV4aXN0LiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDaGVjayB0aGUgcHVsbCByZXF1ZXN0cyB0byBlbnN1cmUgdGhhdCBhbm90aGVyIHBlcnNvbiBoYXNuJ3QgYWxyZWFkeSBzdWJtaXR0ZWQgdGhlIGZlYXR1cmUgb3IgZml4LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZXF1aXJlbWVudHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlcXVpcmVtZW50cyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVxdWlyZW1lbnRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSWYgdGhlIHByb2plY3QgbWFpbnRhaW5lciBoYXMgYW55IGFkZGl0aW9uYWwgcmVxdWlyZW1lbnRzLCB5b3Ugd2lsbCBmaW5kIHRoZW0gbGlzdGVkIGhlcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vcGhwLWZpZy9maWctc3RhbmRhcmRzL2Jsb2IvbWFzdGVyL2FjY2VwdGVkL1BTUi0yLWNvZGluZy1zdHlsZS1ndWlkZS5tZCIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiUFNSLTIgQ29kaW5nIFN0YW5kYXJkIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgLSBUaGUgZWFzaWVzdCB3YXkgdG8gYXBwbHkgdGhlIGNvbnZlbnRpb25zIGlzIHRvIGluc3RhbGwgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly9wZWFyLnBocC5uZXQvcGFja2FnZS9QSFBfQ29kZVNuaWZmZXIiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiUEhQIENvZGUgU25pZmZlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZGQgdGVzdHMhIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgLSBZb3VyIHBhdGNoIHdvbid0IGJlIGFjY2VwdGVkIGlmIGl0IGRvZXNuJ3QgaGF2ZSB0ZXN0cy4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRvY3VtZW50IGFueSBjaGFuZ2UgaW4gYmVoYXZpb3VyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgLSBNYWtlIHN1cmUgdGhlICIpLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlJFQURNRS5tZCIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCBhbnkgb3RoZXIgcmVsZXZhbnQgZG9jdW1lbnRhdGlvbiBhcmUga2VwdCB1cC10by1kYXRlLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29uc2lkZXIgb3VyIHJlbGVhc2UgY3ljbGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAtIFdlIHRyeSB0byBmb2xsb3cgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL3NlbXZlci5vcmcvIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIlNlbVZlciB2Mi4wLjAiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiLiBSYW5kb21seSBicmVha2luZyBwdWJsaWMgQVBJcyBpcyBub3QgYW4gb3B0aW9uLiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiT25lIHB1bGwgcmVxdWVzdCBwZXIgZmVhdHVyZSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIC0gSWYgeW91IHdhbnQgdG8gZG8gbW9yZSB0aGFuIG9uZSB0aGluZywgc2VuZCBtdWx0aXBsZSBwdWxsIHJlcXVlc3RzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlNlbmQgY29oZXJlbnQgaGlzdG9yeSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIC0gTWFrZSBzdXJlIGVhY2ggaW5kaXZpZHVhbCBjb21taXQgaW4geW91ciBwdWxsIHJlcXVlc3QgaXMgbWVhbmluZ2Z1bC4gSWYgeW91IGhhZCB0byBtYWtlIG11bHRpcGxlIGludGVybWVkaWF0ZSBjb21taXRzIHdoaWxlIGRldmVsb3BpbmcsIHBsZWFzZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwOi8vd3d3LmdpdC1zY20uY29tL2Jvb2svZW4vdjIvR2l0LVRvb2xzLVJld3JpdGluZy1IaXN0b3J5I0NoYW5naW5nLU11bHRpcGxlLUNvbW1pdC1NZXNzYWdlcyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJzcXVhc2ggdGhlbSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIgYmVmb3JlIHN1Ym1pdHRpbmcuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYnJhbmRpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2JyYW5kaW5nIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCcmFuZGluZyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJUaGUgbG9nbyB3YXMgZGVzaWduZWQgYnkgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9pcmF6YXN5ZWQiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImlyYXphc3llZCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbllvdSBjYW4gZmluZCBoaWdoIHF1YWxpdHkgU1ZHICYgUE5HIHZlcnNpb25zIGJlbG93LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiVHlwZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJQcmV2aWV3IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkRvd25sb2FkIExpbmsiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiUE5HIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgeyBhdHRyczogeyBzcmM6ICIvbG9nby5wbmciLCBoZWlnaHQ6ICIxMjAiIH0gfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vbGFyYXZlbC1wYXkvd2Vic2l0ZS9ibG9iL21hc3Rlci9icmFuZGluZy9MYXJhdmVsLXBheS1Mb2dvLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiTGFyYXZlbC1wYXktTG9nby5wbmciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJTVkciKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9sb2dvLnN2ZyIsIGhlaWdodDogIjEyMCIgfSB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9sYXJhdmVsLXBheS93ZWJzaXRlL2Jsb2IvbWFzdGVyL2JyYW5kaW5nL0xhcmF2ZWwtcGF5LUxvZ28uc3ZnIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJMYXJhdmVsLXBheS1Mb2dvLnN2ZyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}